{"ast":null,"code":"import React,{useState,useEffect}from'react';import socketIOClient from'socket.io-client';// imports for Widgets\nimport TemperatureWidget from'./TemperatureWidget';import FanWidget from'./FanWidget';import DarknessWidget from'./DarknessWidget';import HumidityWidget from'./HumidityWidget';import LightWidget from'./LightWidget';// imports for charts\nimport TemperatureChart from'./TemperatureChart';import FanChart from'./FanChart';import DarknessChart from'./DarknessChart';import HumidityChart from'./HumidityChart';import LightStateChart from'./LightStateChart';// import for styling\nimport'./DashboardPage.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const endpoint=process.env.REACT_APP_API_URL||\"http://localhost:3000\";function DashboardPage(){//Using useState hook to get the latest temperature from the localstorage and persisting them by parsing its float value\nconst[temperature,setTemperature]=useState(()=>{const s=localStorage.getItem('temperature');return s?parseFloat(s):0;});//Using useState hook to get the latest fan status from the localstorage and persisting them\nconst[fanStatus,setFanstatus]=useState(()=>localStorage.getItem('fanStatus')||'off');//Using useState hook to get the latest darkness value from ldr sensor and get data from the localstorage and persisting them\nconst[darkness,setDarkness]=useState(()=>{const s=localStorage.getItem('darkness');return s?parseFloat(s):0;});//Using useState hook to get the latest humidity from the localstorage and persisting them by parsing its float value\nconst[humidity,setHumidity]=useState(()=>{const s=localStorage.getItem('humidity');return s?parseFloat(s):0;});//Using useState hook to get the latest light status from the localstorage and persisting them\nconst[lightStatus,setLightstatus]=useState(()=>localStorage.getItem('lightStatus')||'off');//Using useState hook to get the latest fan percentage value from the localstorage and persisting them by parsing its float value\nconst[fanPercent,setFanpercent]=useState(()=>{const s=localStorage.getItem('fanPercent');return s?parseFloat(s):0;});//Using useState hook to get the latest light percent from the localstorage and persisting them by parsing its float value\nconst[lightPercent,setLightpercent]=useState(()=>{const s=localStorage.getItem('lightPercent');return s?parseFloat(s):0;});//We used useEffect for handing the initialization and proper closing after each component\nuseEffect(()=>{const socket=socketIOClient(endpoint,{transports:[\"websocket\"]});// We initiated socket connection to gather the data from the topics as soon the component is rendered\nsocket.on('connect',()=>{console.log('Connected to WebSocket with id:',socket.id);});// Here the socket receive the mqtt-message with a json body with all the latest topic reading from the backend server.js \nsocket.on('mqtt_message',data=>{console.log('Received mqtt_message from backend server.js:',data);// Temperature topic- parsing json and getting the data for the temperature with parseFloat and setting them up in localStorage\nif(data.topic==='sensors/temperature'){try{const dataObject=JSON.parse(data.message);const tempValue=parseFloat(dataObject.temperature);if(!isNaN(tempValue)){setTemperature(tempValue);localStorage.setItem('temperature',tempValue);}}catch(err){console.error('Error parsing temperature:',err);}}// fan topic- parsing json and getting the data for the fan status with parse(since its just on/off string) and setting them up in localStorage\nif(data.topic==='sensors/fan'){try{const dataObject=JSON.parse(data.message);const status=dataObject.status;if(status==='on'||status==='off'){setFanstatus(status);localStorage.setItem('fanStatus',status);}}catch(err){console.error('Error parsing fan status:',err);}}// ldr topic- parsing json and getting the data for the darkness key from the json with parseFloat and setting them up in localStorage\nif(data.topic==='sensors/ldr'){try{const dataObject=JSON.parse(data.message);const darkValue=parseFloat(dataObject.darkness);if(!isNaN(darkValue)){setDarkness(darkValue);localStorage.setItem('darkness',darkValue);}}catch(err){console.error('Error parsing darkness value:',err);}}// humidity topic- parsing json and getting the data for the humidity with parseFloat and setting them up in localStorage\nif(data.topic==='sensors/humidity'){try{const dataObject=JSON.parse(data.message);const humidValue=parseFloat(dataObject.humidity);if(!isNaN(humidValue)){setHumidity(humidValue);localStorage.setItem('humidity',humidValue);}}catch(err){console.error('Error parsing humidity:',err);}}// light topic- parsing json and getting the status for the light with status key and setting them up in localStorage\nif(data.topic==='sensors/light'){try{const dataObject=JSON.parse(data.message);const status=dataObject.status;if(status==='on'||status==='off'){setLightstatus(status);localStorage.setItem('lightStatus',status);}}catch(err){console.error('Error parsing light status:',err);}}// fan_usage_percentage topic- parsing json and getting the data for the percentage with parseFloat and setting them up in localStorage\nif(data.topic==='fan_usage_percentage'){try{const dataObject=JSON.parse(data.message);const fanPct=parseFloat(dataObject.percentage);if(!isNaN(fanPct)){setFanpercent(fanPct);localStorage.setItem('fanPercent',fanPct);}}catch(err){console.error('Error parsing fan usage percentage:',err);}}// light_usage_percentage topic- parsing json and getting the data for the percentage with parseFloat and setting them up in localStorage\nif(data.topic==='light_usage_percentage'){try{const dataObject=JSON.parse(data.message);const lightPct=parseFloat(dataObject.percentage);if(!isNaN(lightPct)){setLightpercent(lightPct);localStorage.setItem('lightPercent',lightPct);}}catch(err){console.error('Error parsing light usage percentage:',err);}}});// we are providing a if block to handle all the NaN values just in case if the sensors burn out or any other issue occurs\n// we gracefully disconnect from the websocket connection\nsocket.on('disconnect',()=>{console.log('Disconnected from WebSocket server');});return()=>socket.disconnect();},[]);// Empty dependency array: run once on initialization\nreturn/*#__PURE__*/_jsxs(\"div\",{className:\"db-box\",children:[/*#__PURE__*/_jsx(\"h1\",{className:\"db-title\",children:\"Home Controls\"}),/*#__PURE__*/_jsx(\"div\",{className:\"box-div\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"widget-box\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"widget-comp\",children:[/*#__PURE__*/_jsx(TemperatureWidget,{temperature:temperature}),/*#__PURE__*/_jsx(\"div\",{className:\"chart-comp\",children:/*#__PURE__*/_jsx(TemperatureChart,{})})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"widget-comp\",children:[/*#__PURE__*/_jsx(FanWidget,{status:fanStatus,percent:fanPercent}),/*#__PURE__*/_jsx(\"div\",{className:\"chart-comp\",children:/*#__PURE__*/_jsx(FanChart,{})})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"widget-comp\",children:[/*#__PURE__*/_jsx(DarknessWidget,{darkness:darkness}),/*#__PURE__*/_jsx(\"div\",{className:\"chart-comp\",children:/*#__PURE__*/_jsx(DarknessChart,{})})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"widget-comp\",children:[/*#__PURE__*/_jsx(HumidityWidget,{humidity:humidity}),/*#__PURE__*/_jsx(\"div\",{className:\"chart-comp\",children:/*#__PURE__*/_jsx(HumidityChart,{})})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"widget-comp\",children:[/*#__PURE__*/_jsx(LightWidget,{status:lightStatus,percent:lightPercent}),/*#__PURE__*/_jsx(\"div\",{className:\"chart-comp\",children:/*#__PURE__*/_jsx(LightStateChart,{})})]})]})})]});}export default DashboardPage;","map":{"version":3,"names":["React","useState","useEffect","socketIOClient","TemperatureWidget","FanWidget","DarknessWidget","HumidityWidget","LightWidget","TemperatureChart","FanChart","DarknessChart","HumidityChart","LightStateChart","jsx","_jsx","jsxs","_jsxs","endpoint","process","env","REACT_APP_API_URL","DashboardPage","temperature","setTemperature","s","localStorage","getItem","parseFloat","fanStatus","setFanstatus","darkness","setDarkness","humidity","setHumidity","lightStatus","setLightstatus","fanPercent","setFanpercent","lightPercent","setLightpercent","socket","transports","on","console","log","id","data","topic","dataObject","JSON","parse","message","tempValue","isNaN","setItem","err","error","status","darkValue","humidValue","fanPct","percentage","lightPct","disconnect","className","children","percent"],"sources":["/Users/ratishkumarsaravanan/Desktop/Final-project/front/iot-frontend/iot-frontend/src/DashboardPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport socketIOClient from 'socket.io-client';\n// imports for Widgets\nimport TemperatureWidget from './TemperatureWidget';\nimport FanWidget from './FanWidget';\nimport DarknessWidget from './DarknessWidget';\nimport HumidityWidget from './HumidityWidget';\nimport LightWidget from './LightWidget';\n// imports for charts\nimport TemperatureChart from './TemperatureChart';\nimport FanChart from './FanChart';\nimport DarknessChart from './DarknessChart';\nimport HumidityChart from './HumidityChart';\nimport LightStateChart from './LightStateChart';\n// import for styling\nimport './DashboardPage.css';\n\nconst endpoint = process.env.REACT_APP_API_URL || \"http://localhost:3000\";\n\nfunction DashboardPage() {\n\n  //Using useState hook to get the latest temperature from the localstorage and persisting them by parsing its float value\n  const [temperature, setTemperature] = useState(() => {\n    const s = localStorage.getItem('temperature');\n    return s ? parseFloat(s) : 0;\n  });\n\n  //Using useState hook to get the latest fan status from the localstorage and persisting them\n  const [fanStatus, setFanstatus] = useState(() => localStorage.getItem('fanStatus') || 'off');\n\n  //Using useState hook to get the latest darkness value from ldr sensor and get data from the localstorage and persisting them\n  const [darkness, setDarkness] = useState(() => {\n    const s = localStorage.getItem('darkness');\n    return s ? parseFloat(s) : 0;\n  });\n\n  //Using useState hook to get the latest humidity from the localstorage and persisting them by parsing its float value\n  const [humidity, setHumidity] = useState(() => {\n    const s = localStorage.getItem('humidity');\n    return s ? parseFloat(s) : 0;\n  });\n\n  //Using useState hook to get the latest light status from the localstorage and persisting them\n  const [lightStatus, setLightstatus] = useState(() => localStorage.getItem('lightStatus') || 'off'); \n\n  //Using useState hook to get the latest fan percentage value from the localstorage and persisting them by parsing its float value\n  const [fanPercent, setFanpercent] = useState(() => {\n    const s = localStorage.getItem('fanPercent');\n    return s ? parseFloat(s) : 0;\n  });\n\n  //Using useState hook to get the latest light percent from the localstorage and persisting them by parsing its float value\n  const [lightPercent, setLightpercent] = useState(() => {\n    const s = localStorage.getItem('lightPercent');\n    return s ? parseFloat(s) : 0;\n  });\n\n\n  //We used useEffect for handing the initialization and proper closing after each component\n  useEffect(() => {\n    const socket = socketIOClient(endpoint, { transports: [\"websocket\"] });\n\n    // We initiated socket connection to gather the data from the topics as soon the component is rendered\n    socket.on('connect', () => {\n      console.log('Connected to WebSocket with id:', socket.id);\n    });\n\n    // Here the socket receive the mqtt-message with a json body with all the latest topic reading from the backend server.js \n    socket.on('mqtt_message', (data) => {\n      console.log('Received mqtt_message from backend server.js:', data);\n\n      // Temperature topic- parsing json and getting the data for the temperature with parseFloat and setting them up in localStorage\n      if (data.topic === 'sensors/temperature') {\n        try {\n          const dataObject = JSON.parse(data.message);\n          const tempValue = parseFloat(dataObject.temperature);\n          if (!isNaN(tempValue)) {\n            setTemperature(tempValue);\n            localStorage.setItem('temperature', tempValue);\n          }\n        } catch (err) {\n          console.error('Error parsing temperature:', err);\n        }\n      }\n\n      // fan topic- parsing json and getting the data for the fan status with parse(since its just on/off string) and setting them up in localStorage\n      if (data.topic === 'sensors/fan') {\n        try {\n          const dataObject = JSON.parse(data.message);\n          const status = dataObject.status;\n          if (status === 'on' || status === 'off') {\n            setFanstatus(status);\n            localStorage.setItem('fanStatus', status);\n          }\n        } catch (err) {\n          console.error('Error parsing fan status:', err);\n        }\n      }\n\n      // ldr topic- parsing json and getting the data for the darkness key from the json with parseFloat and setting them up in localStorage\n      if (data.topic === 'sensors/ldr') {\n        try {\n          const dataObject = JSON.parse(data.message);\n          const darkValue = parseFloat(dataObject.darkness);\n          if (!isNaN(darkValue)) {\n            setDarkness(darkValue);\n            localStorage.setItem('darkness', darkValue);\n          }\n        } catch (err) {\n          console.error('Error parsing darkness value:', err);\n        }\n      }\n\n      // humidity topic- parsing json and getting the data for the humidity with parseFloat and setting them up in localStorage\n      if (data.topic === 'sensors/humidity') {\n        try {\n          const dataObject = JSON.parse(data.message);\n          const humidValue = parseFloat(dataObject.humidity);\n          if (!isNaN(humidValue)) {\n            setHumidity(humidValue);\n            localStorage.setItem('humidity', humidValue);\n          }\n        } catch (err) {\n          console.error('Error parsing humidity:', err);\n        }\n      }\n\n      // light topic- parsing json and getting the status for the light with status key and setting them up in localStorage\n      if (data.topic === 'sensors/light') {\n        try {\n          const dataObject = JSON.parse(data.message);\n          const status = dataObject.status;\n          if (status === 'on' || status === 'off') {\n            setLightstatus(status);\n            localStorage.setItem('lightStatus', status);\n          }\n        } catch (err) {\n          console.error('Error parsing light status:', err);\n        }\n      }\n\n      // fan_usage_percentage topic- parsing json and getting the data for the percentage with parseFloat and setting them up in localStorage\n      if (data.topic === 'fan_usage_percentage') {\n        try {\n          const dataObject = JSON.parse(data.message);\n          const fanPct = parseFloat(dataObject.percentage);\n          if (!isNaN(fanPct)) {\n            setFanpercent(fanPct);\n            localStorage.setItem('fanPercent', fanPct);\n          }\n        } catch (err) {\n          console.error('Error parsing fan usage percentage:', err);\n        }\n      }\n\n       // light_usage_percentage topic- parsing json and getting the data for the percentage with parseFloat and setting them up in localStorage\n      if (data.topic === 'light_usage_percentage') {\n        try {\n          const dataObject = JSON.parse(data.message);\n          const lightPct = parseFloat(dataObject.percentage);\n          if (!isNaN(lightPct)) {\n            setLightpercent(lightPct);\n            localStorage.setItem('lightPercent', lightPct);\n          }\n        } catch (err) {\n          console.error('Error parsing light usage percentage:', err);\n        }\n      }\n    });\n\n    // we are providing a if block to handle all the NaN values just in case if the sensors burn out or any other issue occurs\n    // we gracefully disconnect from the websocket connection\n    socket.on('disconnect', () => {\n      console.log('Disconnected from WebSocket server');\n    });\n\n    return () => socket.disconnect();\n  }, []); // Empty dependency array: run once on initialization\n\n  return (\n    <div className=\"db-box\">\n      <h1 className=\"db-title\">Home Controls</h1>\n        <div className=\"box-div\">\n          <div className=\"widget-box\">\n              {/* We made two components in one widget-box one for displaying the sensor readings and other for char */}\n            {/*  for temperature widget */}\n            <div className=\"widget-comp\">\n              <TemperatureWidget temperature={temperature} />\n              <div className=\"chart-comp\">\n                <TemperatureChart />\n              </div>\n            </div>\n\n            {/* for fan widget */}\n            <div className=\"widget-comp\">\n              <FanWidget status={fanStatus} percent={fanPercent} />\n              <div className=\"chart-comp\">\n                <FanChart />\n              </div>\n            </div>\n\n            {/* for darkness widget */}\n            <div className=\"widget-comp\">\n              <DarknessWidget darkness={darkness} />\n              <div className=\"chart-comp\">\n                <DarknessChart />\n              </div>\n            </div>\n\n            {/* for humidity widget */}\n            <div className=\"widget-comp\">\n              <HumidityWidget humidity={humidity} />\n              <div className=\"chart-comp\">\n                <HumidityChart />\n              </div>\n            </div>\n\n            {/* for light widget */}\n            <div className=\"widget-comp\">\n              <LightWidget status={lightStatus} percent={lightPercent} />\n              <div className=\"chart-comp\">\n                <LightStateChart />\n              </div>\n            </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default DashboardPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}