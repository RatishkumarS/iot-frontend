{"ast":null,"code":"import React,{useEffect,useState}from'react';import{Line}from'react-chartjs-2';import socketIOClient from'socket.io-client';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const endpoint=process.env.REACT_APP_API_URL||\"http://localhost:3000\";function TemperatureChart(){// Load initial chart data from localStorage or use empty data\nconst[c,setChart]=useState(()=>{const s=localStorage.getItem('temperatureChartData');return s?JSON.parse(s):{labels:[],datasets:[{label:'Temperature (F)',data:[],fill:false,backgroundColor:'red',borderColor:'red'}]};});useEffect(()=>{// Connect to the Websockets to retrive temp data\nconst socket=socketIOClient(endpoint,{transports:[\"websocket\"]});// Listen for MQTT messages for temperature\nsocket.on('mqtt_message',data=>{if(data.topic==='sensors/temperature'){try{//parse the temperature value from the json and use it with t\nconst dataObj=JSON.parse(data.message);const t=parseFloat(dataObj.temperature);if(!isNaN(t)){// We use current time as label for the chart\nconst cTime=new Date().toLocaleTimeString();//concating the new labels with the new data\nsetChart(prevData=>{const newLabels=prevData.labels.concat(cTime);const newData=prevData.datasets[0].data.concat(t);// Limit to last 10 data points by appending \n// splicing the last 10 readings(labels,data) starting from 0th index on every iteration\nif(newLabels.length>10){newLabels.splice(0,newLabels.length-10);newData.splice(0,newData.length-10);}// Maintain a new object to overide the new data into chart data\nconst charts={labels:newLabels,datasets:[Object.assign({},prevData.datasets[0],{data:newData})]};localStorage.setItem('temperatureChartData',JSON.stringify(charts));return charts;});}}catch(error){console.error(\"Error parsing temperature data\",error);}}});return()=>socket.disconnect();},[]);return/*#__PURE__*/_jsxs(\"div\",{style:{width:'100%',maxWidth:'600px'},children:[/*#__PURE__*/_jsx(\"h5\",{children:\"Temperature vs. Time\"}),/*#__PURE__*/_jsx(Line,{data:c})]});}export default TemperatureChart;","map":{"version":3,"names":["React","useEffect","useState","Line","socketIOClient","jsx","_jsx","jsxs","_jsxs","endpoint","process","env","REACT_APP_API_URL","TemperatureChart","c","setChart","s","localStorage","getItem","JSON","parse","labels","datasets","label","data","fill","backgroundColor","borderColor","socket","transports","on","topic","dataObj","message","t","parseFloat","temperature","isNaN","cTime","Date","toLocaleTimeString","prevData","newLabels","concat","newData","length","splice","charts","Object","assign","setItem","stringify","error","console","disconnect","style","width","maxWidth","children"],"sources":["/Users/ratishkumarsaravanan/Desktop/Final-project/front/iot-frontend/src/TemperatureChart.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport socketIOClient from 'socket.io-client';\n\nconst endpoint = process.env.REACT_APP_API_URL || \"http://localhost:3000\";\n\nfunction TemperatureChart() {\n  // Load initial chart data from localStorage or use empty data\n  const [c, setChart] = useState(() => {\n    const s = localStorage.getItem('temperatureChartData');\n    return s ? JSON.parse(s) : {\n      labels: [],\n      datasets: [{\n        label: 'Temperature (F)',\n        data: [],\n        fill: false,\n        backgroundColor: 'red',\n        borderColor: 'red',\n      }]\n    };\n  });\n\n  useEffect(() => {\n    // Connect to the Websockets to retrive temp data\n    const socket = socketIOClient(endpoint, { transports: [\"websocket\"] });\n\n    // Listen for MQTT messages for temperature\n    socket.on('mqtt_message', (data) => {\n      if (data.topic === 'sensors/temperature') {\n        try {\n          //parse the temperature value from the json and use it with t\n          const dataObj = JSON.parse(data.message);\n          const t = parseFloat(dataObj.temperature);\n          if (!isNaN(t)) {\n            // We use current time as label for the chart\n            const cTime = new Date().toLocaleTimeString();\n            //concating the new labels with the new data\n            setChart(prevData => {\n              const newLabels = prevData.labels.concat(cTime);\n              const newData = prevData.datasets[0].data.concat(t);\n              \n              // Limit to last 10 data points by appending \n              // splicing the last 10 readings(labels,data) starting from 0th index on every iteration\n              if (newLabels.length > 10) {\n                newLabels.splice(0, newLabels.length - 10);\n                newData.splice(0, newData.length - 10);\n              }\n\n              // Maintain a new object to overide the new data into chart data\n              const charts = {\n                labels: newLabels,\n                datasets: [\n                  Object.assign({}, prevData.datasets[0], { data: newData })\n                ]\n              };\n              \n              localStorage.setItem('temperatureChartData', JSON.stringify(charts));\n              return charts;\n            });\n          }\n        } catch (error) {\n          console.error(\"Error parsing temperature data\", error);\n        }\n      }\n    });\n\n    return () => socket.disconnect();\n  }, []);\n\n  return (\n    <div style={{ width: '100%', maxWidth: '600px' }}>\n      <h5>Temperature vs. Time</h5>\n      <Line data={c} />\n    </div>\n  );\n}\n\nexport default TemperatureChart;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}