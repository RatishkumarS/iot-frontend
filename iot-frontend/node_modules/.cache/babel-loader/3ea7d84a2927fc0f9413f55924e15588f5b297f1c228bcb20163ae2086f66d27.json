{"ast":null,"code":"import React,{useState}from'react';import io from'socket.io-client';import'./ControlsPage.css';import fan from'./images/fan.png';// Connecting to  backend server.js through sockets\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const socket=io(process.env.REACT_APP_BACKEND_URL||'http://localhost:3000');//total control logic is as below\nfunction ControlsPage(){// we initialize with false for off for both fan and led\nconst[fanState,setFanstate]=useState(false);const[ledState,setLedstate]=useState(false);// setting automatic control to be true initially which means manual is false\nconst[autoControl,setAutoCtrl]=useState(true);// Toggling fan state in UI if manual control is enabled\nconst fanToggle=()=>{if(!autoControl){const newFanstate=!fanState;setFanstate(newFanstate);// we are emiting the fan status as a JSON object\nsocket.emit('control_update',{fan:{status:newFanstate?'on':'off'}});}};// Toggling LED if manual control is enabled\nconst ledToggle=()=>{if(!autoControl){const newLedstate=!ledState;setLedstate(newLedstate);// we are emiting the LED  status as a JSON object\nsocket.emit('control_update',{led:{status:newLedstate?'on':'off'}});}};// Toggling automatic climate control.\n// When enabling automatic control,both fan and led should be off\nconst autocontrolToggle=()=>{const newAutocontrol=!autoControl;setAutoCtrl(newAutocontrol);// we now, emit the control mode as a JSON object (automatic or manual)\nsocket.emit('control_update',{control:{status:newAutocontrol?'automatic':'manual'}});// If automatic control is enabled, we should turn off fan and LED immediately.\nif(newAutocontrol){if(fanState){setFanstate(false);socket.emit('control_update',{fan:{status:'off'}});}if(ledState){setLedstate(false);socket.emit('control_update',{led:{status:'off'}});}}};return/*#__PURE__*/_jsxs(\"div\",{className:\"out-box\",children:[/*#__PURE__*/_jsxs(\"header\",{className:\"header\",children:[/*#__PURE__*/_jsx(\"h1\",{className:\"control-title\",children:\"Smart Home Control Panel\"}),/*#__PURE__*/_jsx(\"p\",{style:{fontFamily:'cursive'},children:\"Manage your home devices effortlessly\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"boxs-content\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"auto-box\",children:/*#__PURE__*/_jsxs(\"button\",{className:\"auto-btn\",onClick:autocontrolToggle,children:[autoControl?'Disable':'Enable',\" Automatic Climate Control\"]})}),/*#__PURE__*/_jsxs(\"div\",{className:\"ctrl\",children:[/*#__PURE__*/_jsxs(\"button\",{className:\"ctrl-btn\",onClick:fanToggle,disabled:autoControl,children:[/*#__PURE__*/_jsx(\"div\",{className:\"fan-box\",children:/*#__PURE__*/_jsx(\"img\",{src:fan,alt:\"Fan Blades\",className:`fan-bladz ${fanState?'rotate':''}`})}),/*#__PURE__*/_jsxs(\"span\",{children:[\"Fan: \",fanState?'On':'Off']})]}),/*#__PURE__*/_jsxs(\"button\",{className:\"ctrl-btn\",onClick:ledToggle,disabled:autoControl,children:[/*#__PURE__*/_jsx(\"img\",{src:\"https://img.icons8.com/fluency/96/000000/light-on.png\",alt:\"Light Icon\",className:`icon light-icon ${ledState?'glow':''}`}),/*#__PURE__*/_jsxs(\"span\",{children:[\"Light: \",ledState?'On':'Off']})]})]})]})]});}export default ControlsPage;","map":{"version":3,"names":["React","useState","io","fan","jsx","_jsx","jsxs","_jsxs","socket","process","env","REACT_APP_BACKEND_URL","ControlsPage","fanState","setFanstate","ledState","setLedstate","autoControl","setAutoCtrl","fanToggle","newFanstate","emit","status","ledToggle","newLedstate","led","autocontrolToggle","newAutocontrol","control","className","children","style","fontFamily","onClick","disabled","src","alt"],"sources":["/Users/ratishkumarsaravanan/Desktop/Final-project/front/iot-frontend/src/ControlsPage.js"],"sourcesContent":["import React, { useState } from 'react';\nimport io from 'socket.io-client';\nimport './ControlsPage.css'; \nimport fan from './images/fan.png';\n\n// Connecting to  backend server.js through sockets\nconst socket = io(process.env.REACT_APP_BACKEND_URL || 'http://localhost:3000');\n\n//total control logic is as below\nfunction ControlsPage() {\n  // we initialize with false for off for both fan and led\n  const [fanState, setFanstate] = useState(false);\n  const [ledState, setLedstate] = useState(false);\n  // setting automatic control to be true initially which means manual is false\n  const [autoControl, setAutoCtrl] = useState(true);\n\n  // Toggling fan state in UI if manual control is enabled\n  const fanToggle = () => {\n    if (!autoControl) {\n      const newFanstate = !fanState;\n      setFanstate(newFanstate);\n      // we are emiting the fan status as a JSON object\n      socket.emit('control_update', { fan: { status: newFanstate ? 'on' : 'off' } });\n    }\n  };\n\n  // Toggling LED if manual control is enabled\n  const ledToggle = () => {\n    if (!autoControl) {\n      const newLedstate = !ledState;\n      setLedstate(newLedstate);\n      // we are emiting the LED  status as a JSON object\n      socket.emit('control_update', { led: { status: newLedstate ? 'on' : 'off' } });\n    }\n  };\n\n  // Toggling automatic climate control.\n  // When enabling automatic control,both fan and led should be off\n  const autocontrolToggle = () => {\n    const newAutocontrol = !autoControl;\n    setAutoCtrl(newAutocontrol);\n    // we now, emit the control mode as a JSON object (automatic or manual)\n    socket.emit('control_update', { control: { status: newAutocontrol ? 'automatic' : 'manual' } });\n\n    // If automatic control is enabled, we should turn off fan and LED immediately.\n    if (newAutocontrol) {\n      if (fanState) {\n        setFanstate(false);\n        socket.emit('control_update', { fan: { status: 'off' } });\n      }\n      if (ledState) {\n        setLedstate(false);\n        socket.emit('control_update', { led: { status: 'off' } });\n      }\n    }\n  };\n\n  return (\n    <div className=\"out-box\">\n      <header className=\"header\">\n        <h1 className=\"control-title\">Smart Home Control Panel</h1>\n        <p style={{ fontFamily: 'cursive' }}>Manage your home devices effortlessly</p>\n      </header>\n      \n      <div className=\"boxs-content\">\n        <div className=\"auto-box\">\n          <button className=\"auto-btn\" onClick={autocontrolToggle}>\n            {autoControl ? 'Disable' : 'Enable'} Automatic Climate Control\n          </button>\n        </div>\n        <div className=\"ctrl\">\n          {/* for fan button */}\n          <button className=\"ctrl-btn\" onClick={fanToggle} disabled={autoControl}>\n            <div className=\"fan-box\">\n              <img \n                src={fan}\n                alt=\"Fan Blades\" \n                className={`fan-bladz ${fanState ? 'rotate' : ''}`}\n              />\n            </div>\n            <span>Fan: {fanState ? 'On' : 'Off'}</span>\n          </button>\n          {/* for light button */}\n          <button className=\"ctrl-btn\" onClick={ledToggle} disabled={autoControl}>\n            <img \n              src=\"https://img.icons8.com/fluency/96/000000/light-on.png\" \n              alt=\"Light Icon\" \n              className={`icon light-icon ${ledState ? 'glow' : ''}`}\n            />\n            <span>Light: {ledState ? 'On' : 'Off'}</span>\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default ControlsPage;"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,KAAQ,OAAO,CACvC,MAAO,CAAAC,EAAE,KAAM,kBAAkB,CACjC,MAAO,oBAAoB,CAC3B,MAAO,CAAAC,GAAG,KAAM,kBAAkB,CAElC;AAAA,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBACA,KAAM,CAAAC,MAAM,CAAGN,EAAE,CAACO,OAAO,CAACC,GAAG,CAACC,qBAAqB,EAAI,uBAAuB,CAAC,CAE/E;AACA,QAAS,CAAAC,YAAYA,CAAA,CAAG,CACtB;AACA,KAAM,CAACC,QAAQ,CAAEC,WAAW,CAAC,CAAGb,QAAQ,CAAC,KAAK,CAAC,CAC/C,KAAM,CAACc,QAAQ,CAAEC,WAAW,CAAC,CAAGf,QAAQ,CAAC,KAAK,CAAC,CAC/C;AACA,KAAM,CAACgB,WAAW,CAAEC,WAAW,CAAC,CAAGjB,QAAQ,CAAC,IAAI,CAAC,CAEjD;AACA,KAAM,CAAAkB,SAAS,CAAGA,CAAA,GAAM,CACtB,GAAI,CAACF,WAAW,CAAE,CAChB,KAAM,CAAAG,WAAW,CAAG,CAACP,QAAQ,CAC7BC,WAAW,CAACM,WAAW,CAAC,CACxB;AACAZ,MAAM,CAACa,IAAI,CAAC,gBAAgB,CAAE,CAAElB,GAAG,CAAE,CAAEmB,MAAM,CAAEF,WAAW,CAAG,IAAI,CAAG,KAAM,CAAE,CAAC,CAAC,CAChF,CACF,CAAC,CAED;AACA,KAAM,CAAAG,SAAS,CAAGA,CAAA,GAAM,CACtB,GAAI,CAACN,WAAW,CAAE,CAChB,KAAM,CAAAO,WAAW,CAAG,CAACT,QAAQ,CAC7BC,WAAW,CAACQ,WAAW,CAAC,CACxB;AACAhB,MAAM,CAACa,IAAI,CAAC,gBAAgB,CAAE,CAAEI,GAAG,CAAE,CAAEH,MAAM,CAAEE,WAAW,CAAG,IAAI,CAAG,KAAM,CAAE,CAAC,CAAC,CAChF,CACF,CAAC,CAED;AACA;AACA,KAAM,CAAAE,iBAAiB,CAAGA,CAAA,GAAM,CAC9B,KAAM,CAAAC,cAAc,CAAG,CAACV,WAAW,CACnCC,WAAW,CAACS,cAAc,CAAC,CAC3B;AACAnB,MAAM,CAACa,IAAI,CAAC,gBAAgB,CAAE,CAAEO,OAAO,CAAE,CAAEN,MAAM,CAAEK,cAAc,CAAG,WAAW,CAAG,QAAS,CAAE,CAAC,CAAC,CAE/F;AACA,GAAIA,cAAc,CAAE,CAClB,GAAId,QAAQ,CAAE,CACZC,WAAW,CAAC,KAAK,CAAC,CAClBN,MAAM,CAACa,IAAI,CAAC,gBAAgB,CAAE,CAAElB,GAAG,CAAE,CAAEmB,MAAM,CAAE,KAAM,CAAE,CAAC,CAAC,CAC3D,CACA,GAAIP,QAAQ,CAAE,CACZC,WAAW,CAAC,KAAK,CAAC,CAClBR,MAAM,CAACa,IAAI,CAAC,gBAAgB,CAAE,CAAEI,GAAG,CAAE,CAAEH,MAAM,CAAE,KAAM,CAAE,CAAC,CAAC,CAC3D,CACF,CACF,CAAC,CAED,mBACEf,KAAA,QAAKsB,SAAS,CAAC,SAAS,CAAAC,QAAA,eACtBvB,KAAA,WAAQsB,SAAS,CAAC,QAAQ,CAAAC,QAAA,eACxBzB,IAAA,OAAIwB,SAAS,CAAC,eAAe,CAAAC,QAAA,CAAC,0BAAwB,CAAI,CAAC,cAC3DzB,IAAA,MAAG0B,KAAK,CAAE,CAAEC,UAAU,CAAE,SAAU,CAAE,CAAAF,QAAA,CAAC,uCAAqC,CAAG,CAAC,EACxE,CAAC,cAETvB,KAAA,QAAKsB,SAAS,CAAC,cAAc,CAAAC,QAAA,eAC3BzB,IAAA,QAAKwB,SAAS,CAAC,UAAU,CAAAC,QAAA,cACvBvB,KAAA,WAAQsB,SAAS,CAAC,UAAU,CAACI,OAAO,CAAEP,iBAAkB,CAAAI,QAAA,EACrDb,WAAW,CAAG,SAAS,CAAG,QAAQ,CAAC,4BACtC,EAAQ,CAAC,CACN,CAAC,cACNV,KAAA,QAAKsB,SAAS,CAAC,MAAM,CAAAC,QAAA,eAEnBvB,KAAA,WAAQsB,SAAS,CAAC,UAAU,CAACI,OAAO,CAAEd,SAAU,CAACe,QAAQ,CAAEjB,WAAY,CAAAa,QAAA,eACrEzB,IAAA,QAAKwB,SAAS,CAAC,SAAS,CAAAC,QAAA,cACtBzB,IAAA,QACE8B,GAAG,CAAEhC,GAAI,CACTiC,GAAG,CAAC,YAAY,CAChBP,SAAS,CAAE,aAAahB,QAAQ,CAAG,QAAQ,CAAG,EAAE,EAAG,CACpD,CAAC,CACC,CAAC,cACNN,KAAA,SAAAuB,QAAA,EAAM,OAAK,CAACjB,QAAQ,CAAG,IAAI,CAAG,KAAK,EAAO,CAAC,EACrC,CAAC,cAETN,KAAA,WAAQsB,SAAS,CAAC,UAAU,CAACI,OAAO,CAAEV,SAAU,CAACW,QAAQ,CAAEjB,WAAY,CAAAa,QAAA,eACrEzB,IAAA,QACE8B,GAAG,CAAC,uDAAuD,CAC3DC,GAAG,CAAC,YAAY,CAChBP,SAAS,CAAE,mBAAmBd,QAAQ,CAAG,MAAM,CAAG,EAAE,EAAG,CACxD,CAAC,cACFR,KAAA,SAAAuB,QAAA,EAAM,SAAO,CAACf,QAAQ,CAAG,IAAI,CAAG,KAAK,EAAO,CAAC,EACvC,CAAC,EACN,CAAC,EACH,CAAC,EACH,CAAC,CAEV,CAEA,cAAe,CAAAH,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}