{"ast":null,"code":"import React,{useEffect,useState}from'react';import{Line}from'react-chartjs-2';import socketIOClient from'socket.io-client';// endpoint for Socket.IO server\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const endpoint=process.env.REACT_APP_API_URL||\"http://localhost:3000\";function HumidityChart(){// we are loading initial chart data from localStorage \nconst[c,setChart]=useState(()=>{const s=localStorage.getItem('humidityChartData');return s?JSON.parse(s):{labels:[],datasets:[{label:'Humidity (%)',data:[],fill:false,backgroundColor:'blue',borderColor:'blue'}]};});//initialing connection to socket\nuseEffect(()=>{const socket=socketIOClient(endpoint,{transports:[\"websocket\"]});// we listen to MQTT messages for humidity\nsocket.on('mqtt_message',data=>{if(data.topic==='sensors/humidity'){try{const dataObj=JSON.parse(data.message);const hval=parseFloat(dataObj.humidity);if(!isNaN(hval)){const cTime=new Date().toLocaleTimeString();setChart(prevData=>{const newLabels=prevData.labels.concat(cTime);const newData=prevData.datasets[0].data.concat(hval);// Keeping only the last 10 data points\nif(newLabels.length>10){newLabels.splice(0,newLabels.length-10);newData.splice(0,newData.length-10);}//updating the chart data \nconst charts={labels:newLabels,datasets:[Object.assign({},prevData.datasets[0],{data:newData})]};localStorage.setItem('humidityChartData',JSON.stringify(charts));return charts;});}}catch(error){console.error(\"Error parsing humidity data\",error);}}});return()=>socket.disconnect();},[]);return/*#__PURE__*/_jsxs(\"div\",{style:{width:'100%',maxWidth:'600px'},children:[/*#__PURE__*/_jsx(\"h5\",{children:\"Humidity vs. Time\"}),/*#__PURE__*/_jsx(Line,{data:c})]});}export default HumidityChart;","map":{"version":3,"names":["React","useEffect","useState","Line","socketIOClient","jsx","_jsx","jsxs","_jsxs","endpoint","process","env","REACT_APP_API_URL","HumidityChart","c","setChart","s","localStorage","getItem","JSON","parse","labels","datasets","label","data","fill","backgroundColor","borderColor","socket","transports","on","topic","dataObj","message","hval","parseFloat","humidity","isNaN","cTime","Date","toLocaleTimeString","prevData","newLabels","concat","newData","length","splice","charts","Object","assign","setItem","stringify","error","console","disconnect","style","width","maxWidth","children"],"sources":["/Users/ratishkumarsaravanan/Desktop/Final-project/front/iot-frontend/src/HumidityChart.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport socketIOClient from 'socket.io-client';\n\n// endpoint for Socket.IO server\nconst endpoint = process.env.REACT_APP_API_URL || \"http://localhost:3000\";\n\nfunction HumidityChart() {\n  // we are loading initial chart data from localStorage \n  const [c, setChart] = useState(() => {\n    const s = localStorage.getItem('humidityChartData');\n    return s ? JSON.parse(s) : {\n      labels: [],\n      datasets: [{\n        label: 'Humidity (%)',\n        data: [],\n        fill: false,\n        backgroundColor: 'blue',\n        borderColor: 'blue',\n      }]\n    };\n  });\n\n  //initialing connection to socket\n  useEffect(() => {\n    const socket = socketIOClient(endpoint, { transports: [\"websocket\"] });\n\n    // we listen to MQTT messages for humidity\n    socket.on('mqtt_message', (data) => {\n      if (data.topic === 'sensors/humidity') {\n        try {\n          const dataObj = JSON.parse(data.message);\n          const hval = parseFloat(dataObj.humidity);\n          if (!isNaN(hval)) {\n            const cTime = new Date().toLocaleTimeString();\n            setChart(prevData => {\n              const newLabels = prevData.labels.concat(cTime);\n              const newData = prevData.datasets[0].data.concat(hval);\n              // Keeping only the last 10 data points\n              if (newLabels.length > 10) {\n                newLabels.splice(0, newLabels.length - 10);\n                newData.splice(0, newData.length - 10);\n              }\n              //updating the chart data \n              const charts = {\n                labels: newLabels,\n                datasets: [\n                  Object.assign({}, prevData.datasets[0], { data: newData })\n                ]\n              };\n              localStorage.setItem('humidityChartData', JSON.stringify(charts));\n              return charts;\n            });\n          }\n        } catch (error) {\n          console.error(\"Error parsing humidity data\", error);\n        }\n      }\n    });\n\n    return () => socket.disconnect();\n  }, []);\n\n  return (\n    <div style={{ width: '100%', maxWidth: '600px' }}>\n      <h5>Humidity vs. Time</h5>\n      <Line data={c} />\n    </div>\n  );\n}\n\nexport default HumidityChart;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}