{"ast":null,"code":"import React,{useState,useEffect}from'react';import ReactDOM from'react-dom';import io from'socket.io-client';import'./AlertsIndicator.css';// We mainly use this to create a Alert indicator to the user when temp/ldr/humidity exceeds a certain threshold. \n// We connect to backend server to get the data from the topics\nimport{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const socket=io(process.env.REACT_APP_BACKEND_URL||'http://localhost:3000');function AlertsIndicator(){const[blink,setBlink]=useState(false);const[showTable,setAlertstable]=useState(false);const[alerts,setAlerts]=useState([]);useEffect(()=>{const handleAlert=data=>{console.log(\"Received mqtt_message event:\",data);//checking the alert topics then parsing the topics to get the status value from the json\nif(data.topic==='Alert_temp'||data.topic==='Alert_humidity'||data.topic==='Alert_darkness'){let alerts='';try{// Try parsing the JSON payload, e.g., {\"status\": \"on\"}\nconst parsed=JSON.parse(data.message);if(parsed.status){alerts=parsed.status.toLowerCase();}}catch(e){console.warn(`Could not parse the JSON for the topic ${data.topic}: ${e.message}`);alerts=data.message.toLowerCase();}console.log(`Parsed alert status successfully for ${data.topic}: ${alerts}`);// If the alert status is turned \"on\", trigger the blinking in Alerts on Navbar\nif(alerts==='on'){//if there is another alert in short interval after the user clicks the alert link then again it should start blik in 50ms\nsetBlink(false);setTimeout(()=>{setBlink(true);},50);}}};// Listen to the mqtt_message which has the Alert data...\nsocket.on('mqtt_message',handleAlert);return()=>{socket.off('mqtt_message',handleAlert);};},[]);const handleClick=async()=>{//on the alert click in navbar by user the blink should stop and a prop with Alerts table records should be displayed\nsetBlink(false);setAlertstable(true);try{// parsing the alert records in the json response into a data variable\nconst response=await fetch('http://localhost:3000/alerts');const data=await response.json();setAlerts(data.alerts||[]);}catch(error){console.error('Error fetching alerts:',error);}};// close the prop on X click in UI\nconst closeModal=()=>{setAlertstable(false);};// There is a clear alerts button feature where the button click initiates a post request to clear the alertsrecord array with all alert records\nconst handleClearAlerts=async()=>{try{const response=await fetch('http://localhost:3000/clear_alerts',{method:'POST'});const data=await response.json();console.log(data.message);setAlerts([]);}catch(error){console.error('Error clearing the alerts:',error);}};const modalContent=/*#__PURE__*/_jsx(\"div\",{className:\"custom\",onClick:closeModal,children:/*#__PURE__*/_jsxs(\"div\",{className:\"custom-content\",onClick:e=>e.stopPropagation(),children:[/*#__PURE__*/_jsx(\"button\",{className:\"close\",onClick:closeModal,children:\"X\"}),/*#__PURE__*/_jsx(\"h2\",{children:\"Alert Records\"}),/*#__PURE__*/_jsxs(\"table\",{children:[/*#__PURE__*/_jsx(\"thead\",{children:/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"th\",{children:\"Sensor\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Value\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Date\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Time\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Location\"})]})}),/*#__PURE__*/_jsx(\"tbody\",{children:alerts.length>0?alerts.map((alert,index)=>/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"td\",{children:alert.sensor}),/*#__PURE__*/_jsx(\"td\",{children:alert.value}),/*#__PURE__*/_jsx(\"td\",{children:alert.date}),/*#__PURE__*/_jsx(\"td\",{children:alert.time}),/*#__PURE__*/_jsx(\"td\",{children:alert.location})]},index)):/*#__PURE__*/_jsx(\"tr\",{children:/*#__PURE__*/_jsx(\"td\",{colSpan:\"5\",style:{textAlign:'center'},children:\"No alerts available.\"})})})]}),/*#__PURE__*/_jsx(\"div\",{style:{marginTop:'10px',textAlign:'right'},children:/*#__PURE__*/_jsx(\"button\",{className:\"clear\",onClick:handleClearAlerts,children:\"Clear Alerts\"})})]})});return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"span\",{onClick:handleClick,className:blink?'blink-alert':'',style:{display:'inline-block',cursor:'pointer'},children:\"Alerts\"}),showTable&&/*#__PURE__*/ReactDOM.createPortal(modalContent,document.body)]});}export default AlertsIndicator;","map":{"version":3,"names":["React","useState","useEffect","ReactDOM","io","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","socket","process","env","REACT_APP_BACKEND_URL","AlertsIndicator","blink","setBlink","showTable","setAlertstable","alerts","setAlerts","handleAlert","data","console","log","topic","parsed","JSON","parse","message","status","toLowerCase","e","warn","setTimeout","on","off","handleClick","response","fetch","json","error","closeModal","handleClearAlerts","method","modalContent","className","onClick","children","stopPropagation","length","map","alert","index","sensor","value","date","time","location","colSpan","style","textAlign","marginTop","display","cursor","createPortal","document","body"],"sources":["/Users/ratishkumarsaravanan/Desktop/Final-project/front/iot-frontend/iot-frontend/src/AlertsIndicator.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport io from 'socket.io-client';\nimport './AlertsIndicator.css'; \n\n// We mainly use this to create a Alert indicator to the user when temp/ldr/humidity exceeds a certain threshold. \n// We connect to backend server to get the data from the topics\nconst socket = io(process.env.REACT_APP_BACKEND_URL || 'http://localhost:3000');\n\n\n\nfunction AlertsIndicator() {\n  const [blink, setBlink] = useState(false);\n  const [showTable, setAlertstable] = useState(false);\n  const [alerts, setAlerts] = useState([]);\n\n  useEffect(() => {\n    const handleAlert = (data) => {\n      console.log(\"Received mqtt_message event:\", data);\n      \n      //checking the alert topics then parsing the topics to get the status value from the json\n      if (\n        data.topic === 'Alert_temp' ||\n        data.topic === 'Alert_humidity' ||\n        data.topic === 'Alert_darkness'\n      ) {\n        let alerts = '';\n        try {\n          // Try parsing the JSON payload, e.g., {\"status\": \"on\"}\n          const parsed = JSON.parse(data.message);\n          if (parsed.status) {\n            alerts = parsed.status.toLowerCase();\n          }\n        } catch (e) {\n          console.warn(`Could not parse the JSON for the topic ${data.topic}: ${e.message}`);\n          alerts = data.message.toLowerCase();\n        }\n        console.log(`Parsed alert status successfully for ${data.topic}: ${alerts}`);\n        \n        // If the alert status is turned \"on\", trigger the blinking in Alerts on Navbar\n        if (alerts === 'on') {\n          //if there is another alert in short interval after the user clicks the alert link then again it should start blik in 50ms\n          setBlink(false);\n          setTimeout(() => {\n            setBlink(true);\n          }, 50);\n        }\n      }\n    };\n\n    // Listen to the mqtt_message which has the Alert data...\n    socket.on('mqtt_message', handleAlert);\n    return () => {\n      socket.off('mqtt_message', handleAlert);\n    };\n  }, []);\n\n  const handleClick = async () => {\n    //on the alert click in navbar by user the blink should stop and a prop with Alerts table records should be displayed\n    setBlink(false);\n    setAlertstable(true);\n    try {\n      // parsing the alert records in the json response into a data variable\n      const response = await fetch('http://localhost:3000/alerts');\n      const data = await response.json();\n      setAlerts(data.alerts || []);\n    } catch (error) {\n      console.error('Error fetching alerts:', error);\n    }\n  };\n\n  // close the prop on X click in UI\n  const closeModal = () => {\n    setAlertstable(false);\n  };\n\n  // There is a clear alerts button feature where the button click initiates a post request to clear the alertsrecord array with all alert records\n  const handleClearAlerts = async () => {\n    try {\n      const response = await fetch('http://localhost:3000/clear_alerts', {\n        method: 'POST'\n      });\n      const data = await response.json();\n      console.log(data.message);\n      setAlerts([]);\n    } catch (error) {\n      console.error('Error clearing the alerts:', error);\n    }\n  };\n\n  const modalContent = (\n    <div className=\"custom\" onClick={closeModal}>\n      <div className=\"custom-content\" onClick={(e) => e.stopPropagation()}>\n        <button className=\"close\" onClick={closeModal}>X</button>\n        <h2>Alert Records</h2>\n        <table>\n          <thead>\n            <tr>\n              <th>Sensor</th>\n              <th>Value</th>\n              <th>Date</th>\n              <th>Time</th>\n              <th>Location</th>\n            </tr>\n          </thead>\n          <tbody>\n            {alerts.length > 0 ? (\n              alerts.map((alert, index) => (\n                <tr key={index}>\n                  <td>{alert.sensor}</td>\n                  <td>{alert.value}</td>\n                  <td>{alert.date}</td>\n                  <td>{alert.time}</td>\n                  <td>{alert.location}</td>\n                </tr>\n              ))\n            ) : (\n              <tr>\n                <td colSpan=\"5\" style={{ textAlign: 'center' }}>No alerts available.</td>\n              </tr>\n            )}\n          </tbody>\n        </table>\n        <div style={{ marginTop: '10px', textAlign: 'right' }}>\n          <button className=\"clear\" onClick={handleClearAlerts}>Clear Alerts</button>\n        </div>\n      </div>\n    </div>\n  );\n\n  return (\n    <>\n      <span \n        onClick={handleClick} \n        className={blink ? 'blink-alert' : ''} \n        style={{ display: 'inline-block', cursor: 'pointer' }}\n      >\n        Alerts\n      </span>\n      {showTable && ReactDOM.createPortal(modalContent, document.body)}\n    </>\n  );\n}\n\nexport default AlertsIndicator;"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAClD,MAAO,CAAAC,QAAQ,KAAM,WAAW,CAChC,MAAO,CAAAC,EAAE,KAAM,kBAAkB,CACjC,MAAO,uBAAuB,CAE9B;AACA;AAAA,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,CAAAC,QAAA,IAAAC,SAAA,yBACA,KAAM,CAAAC,MAAM,CAAGP,EAAE,CAACQ,OAAO,CAACC,GAAG,CAACC,qBAAqB,EAAI,uBAAuB,CAAC,CAI/E,QAAS,CAAAC,eAAeA,CAAA,CAAG,CACzB,KAAM,CAACC,KAAK,CAAEC,QAAQ,CAAC,CAAGhB,QAAQ,CAAC,KAAK,CAAC,CACzC,KAAM,CAACiB,SAAS,CAAEC,cAAc,CAAC,CAAGlB,QAAQ,CAAC,KAAK,CAAC,CACnD,KAAM,CAACmB,MAAM,CAAEC,SAAS,CAAC,CAAGpB,QAAQ,CAAC,EAAE,CAAC,CAExCC,SAAS,CAAC,IAAM,CACd,KAAM,CAAAoB,WAAW,CAAIC,IAAI,EAAK,CAC5BC,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAEF,IAAI,CAAC,CAEjD;AACA,GACEA,IAAI,CAACG,KAAK,GAAK,YAAY,EAC3BH,IAAI,CAACG,KAAK,GAAK,gBAAgB,EAC/BH,IAAI,CAACG,KAAK,GAAK,gBAAgB,CAC/B,CACA,GAAI,CAAAN,MAAM,CAAG,EAAE,CACf,GAAI,CACF;AACA,KAAM,CAAAO,MAAM,CAAGC,IAAI,CAACC,KAAK,CAACN,IAAI,CAACO,OAAO,CAAC,CACvC,GAAIH,MAAM,CAACI,MAAM,CAAE,CACjBX,MAAM,CAAGO,MAAM,CAACI,MAAM,CAACC,WAAW,CAAC,CAAC,CACtC,CACF,CAAE,MAAOC,CAAC,CAAE,CACVT,OAAO,CAACU,IAAI,CAAC,0CAA0CX,IAAI,CAACG,KAAK,KAAKO,CAAC,CAACH,OAAO,EAAE,CAAC,CAClFV,MAAM,CAAGG,IAAI,CAACO,OAAO,CAACE,WAAW,CAAC,CAAC,CACrC,CACAR,OAAO,CAACC,GAAG,CAAC,wCAAwCF,IAAI,CAACG,KAAK,KAAKN,MAAM,EAAE,CAAC,CAE5E;AACA,GAAIA,MAAM,GAAK,IAAI,CAAE,CACnB;AACAH,QAAQ,CAAC,KAAK,CAAC,CACfkB,UAAU,CAAC,IAAM,CACflB,QAAQ,CAAC,IAAI,CAAC,CAChB,CAAC,CAAE,EAAE,CAAC,CACR,CACF,CACF,CAAC,CAED;AACAN,MAAM,CAACyB,EAAE,CAAC,cAAc,CAAEd,WAAW,CAAC,CACtC,MAAO,IAAM,CACXX,MAAM,CAAC0B,GAAG,CAAC,cAAc,CAAEf,WAAW,CAAC,CACzC,CAAC,CACH,CAAC,CAAE,EAAE,CAAC,CAEN,KAAM,CAAAgB,WAAW,CAAG,KAAAA,CAAA,GAAY,CAC9B;AACArB,QAAQ,CAAC,KAAK,CAAC,CACfE,cAAc,CAAC,IAAI,CAAC,CACpB,GAAI,CACF;AACA,KAAM,CAAAoB,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,8BAA8B,CAAC,CAC5D,KAAM,CAAAjB,IAAI,CAAG,KAAM,CAAAgB,QAAQ,CAACE,IAAI,CAAC,CAAC,CAClCpB,SAAS,CAACE,IAAI,CAACH,MAAM,EAAI,EAAE,CAAC,CAC9B,CAAE,MAAOsB,KAAK,CAAE,CACdlB,OAAO,CAACkB,KAAK,CAAC,wBAAwB,CAAEA,KAAK,CAAC,CAChD,CACF,CAAC,CAED;AACA,KAAM,CAAAC,UAAU,CAAGA,CAAA,GAAM,CACvBxB,cAAc,CAAC,KAAK,CAAC,CACvB,CAAC,CAED;AACA,KAAM,CAAAyB,iBAAiB,CAAG,KAAAA,CAAA,GAAY,CACpC,GAAI,CACF,KAAM,CAAAL,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,oCAAoC,CAAE,CACjEK,MAAM,CAAE,MACV,CAAC,CAAC,CACF,KAAM,CAAAtB,IAAI,CAAG,KAAM,CAAAgB,QAAQ,CAACE,IAAI,CAAC,CAAC,CAClCjB,OAAO,CAACC,GAAG,CAACF,IAAI,CAACO,OAAO,CAAC,CACzBT,SAAS,CAAC,EAAE,CAAC,CACf,CAAE,MAAOqB,KAAK,CAAE,CACdlB,OAAO,CAACkB,KAAK,CAAC,4BAA4B,CAAEA,KAAK,CAAC,CACpD,CACF,CAAC,CAED,KAAM,CAAAI,YAAY,cAChBxC,IAAA,QAAKyC,SAAS,CAAC,QAAQ,CAACC,OAAO,CAAEL,UAAW,CAAAM,QAAA,cAC1CzC,KAAA,QAAKuC,SAAS,CAAC,gBAAgB,CAACC,OAAO,CAAGf,CAAC,EAAKA,CAAC,CAACiB,eAAe,CAAC,CAAE,CAAAD,QAAA,eAClE3C,IAAA,WAAQyC,SAAS,CAAC,OAAO,CAACC,OAAO,CAAEL,UAAW,CAAAM,QAAA,CAAC,GAAC,CAAQ,CAAC,cACzD3C,IAAA,OAAA2C,QAAA,CAAI,eAAa,CAAI,CAAC,cACtBzC,KAAA,UAAAyC,QAAA,eACE3C,IAAA,UAAA2C,QAAA,cACEzC,KAAA,OAAAyC,QAAA,eACE3C,IAAA,OAAA2C,QAAA,CAAI,QAAM,CAAI,CAAC,cACf3C,IAAA,OAAA2C,QAAA,CAAI,OAAK,CAAI,CAAC,cACd3C,IAAA,OAAA2C,QAAA,CAAI,MAAI,CAAI,CAAC,cACb3C,IAAA,OAAA2C,QAAA,CAAI,MAAI,CAAI,CAAC,cACb3C,IAAA,OAAA2C,QAAA,CAAI,UAAQ,CAAI,CAAC,EACf,CAAC,CACA,CAAC,cACR3C,IAAA,UAAA2C,QAAA,CACG7B,MAAM,CAAC+B,MAAM,CAAG,CAAC,CAChB/B,MAAM,CAACgC,GAAG,CAAC,CAACC,KAAK,CAAEC,KAAK,gBACtB9C,KAAA,OAAAyC,QAAA,eACE3C,IAAA,OAAA2C,QAAA,CAAKI,KAAK,CAACE,MAAM,CAAK,CAAC,cACvBjD,IAAA,OAAA2C,QAAA,CAAKI,KAAK,CAACG,KAAK,CAAK,CAAC,cACtBlD,IAAA,OAAA2C,QAAA,CAAKI,KAAK,CAACI,IAAI,CAAK,CAAC,cACrBnD,IAAA,OAAA2C,QAAA,CAAKI,KAAK,CAACK,IAAI,CAAK,CAAC,cACrBpD,IAAA,OAAA2C,QAAA,CAAKI,KAAK,CAACM,QAAQ,CAAK,CAAC,GALlBL,KAML,CACL,CAAC,cAEFhD,IAAA,OAAA2C,QAAA,cACE3C,IAAA,OAAIsD,OAAO,CAAC,GAAG,CAACC,KAAK,CAAE,CAAEC,SAAS,CAAE,QAAS,CAAE,CAAAb,QAAA,CAAC,sBAAoB,CAAI,CAAC,CACvE,CACL,CACI,CAAC,EACH,CAAC,cACR3C,IAAA,QAAKuD,KAAK,CAAE,CAAEE,SAAS,CAAE,MAAM,CAAED,SAAS,CAAE,OAAQ,CAAE,CAAAb,QAAA,cACpD3C,IAAA,WAAQyC,SAAS,CAAC,OAAO,CAACC,OAAO,CAAEJ,iBAAkB,CAAAK,QAAA,CAAC,cAAY,CAAQ,CAAC,CACxE,CAAC,EACH,CAAC,CACH,CACN,CAED,mBACEzC,KAAA,CAAAE,SAAA,EAAAuC,QAAA,eACE3C,IAAA,SACE0C,OAAO,CAAEV,WAAY,CACrBS,SAAS,CAAE/B,KAAK,CAAG,aAAa,CAAG,EAAG,CACtC6C,KAAK,CAAE,CAAEG,OAAO,CAAE,cAAc,CAAEC,MAAM,CAAE,SAAU,CAAE,CAAAhB,QAAA,CACvD,QAED,CAAM,CAAC,CACN/B,SAAS,eAAIf,QAAQ,CAAC+D,YAAY,CAACpB,YAAY,CAAEqB,QAAQ,CAACC,IAAI,CAAC,EAChE,CAAC,CAEP,CAEA,cAAe,CAAArD,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}